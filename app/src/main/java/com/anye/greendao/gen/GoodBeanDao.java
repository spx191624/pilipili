package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import nataya.pilipili.bean.GoodBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD_BEAN".
*/
public class GoodBeanDao extends AbstractDao<GoodBean, Long> {

    public static final String TABLENAME = "GOOD_BEAN";

    /**
     * Properties of entity GoodBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", false, "URL");
        public final static Property Shuid = new Property(1, int.class, "shuid", false, "SHUID");
        public final static Property Num = new Property(2, int.class, "num", false, "NUM");
        public final static Property Price = new Property(3, double.class, "price", false, "PRICE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
    }


    public GoodBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD_BEAN\" (" + //
                "\"URL\" TEXT," + // 0: url
                "\"SHUID\" INTEGER NOT NULL ," + // 1: shuid
                "\"NUM\" INTEGER NOT NULL ," + // 2: num
                "\"PRICE\" REAL NOT NULL ," + // 3: price
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"_id\" INTEGER PRIMARY KEY );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
        stmt.bindLong(2, entity.getShuid());
        stmt.bindLong(3, entity.getNum());
        stmt.bindDouble(4, entity.getPrice());
        stmt.bindString(5, entity.getName());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
        stmt.bindLong(2, entity.getShuid());
        stmt.bindLong(3, entity.getNum());
        stmt.bindDouble(4, entity.getPrice());
        stmt.bindString(5, entity.getName());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public GoodBean readEntity(Cursor cursor, int offset) {
        GoodBean entity = new GoodBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.getInt(offset + 1), // shuid
            cursor.getInt(offset + 2), // num
            cursor.getDouble(offset + 3), // price
            cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodBean entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShuid(cursor.getInt(offset + 1));
        entity.setNum(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getDouble(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
